{"version":3,"sources":["types.ts","Header.tsx","useAvailability.ts","TimeCounter.tsx","RecentAvailability.tsx","Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ConnectionStatus","ActionType","Header","wsStatus","connect","className","role","aria-label","href","aria-expanded","data-target","aria-hidden","id","CONNECTED","icon","faWifi","DISCONNECTED","onClick","faRedo","TimeCounter","start","useState","elapsed","setElapsed","useEffect","watchId","setInterval","rfc","startDatetime","moment","duration","diff","humanize","rfcToHuman","clearInterval","RecentAvailability","history","latest","available","time","slice","map","item","Fragment","key","Footer","faCoffee","initialState","data","error","reducer","state","action","type","WS_CONNECT_SUCCESS","WS_DISCONNECT","SET_DATA","payload","SET_ERROR","Error","useAvailability","useReducer","dispatch","Date","now","lastConnected","forceConnect","socket","WebSocket","process","onopen","evt","onerror","onmessage","console","log","JSON","parse","onclose","send","close","useCallback","Wrapper","children","App","message","max","recent","length","faExclamationTriangle","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e433c67.chunk.js","sourcesContent":["export type AvailabilityRecord = {\n    available: boolean;\n    time: string;\n}\n\nexport enum ConnectionStatus {\n    CONNECTED,\n    DISCONNECTED,\n}\n\nexport type DataPackage = {\n    latest: AvailabilityRecord;\n    recent: AvailabilityRecord[];\n}\n","import React from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faRedo, faWifi } from \"@fortawesome/free-solid-svg-icons\";\nimport { ConnectionStatus } from \"./types\";\n\ntype Props = {\n    wsStatus: ConnectionStatus;\n    connect?: () => void;\n}\n\nconst Header = ({ wsStatus, connect }: Props) => (\n    <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n        <div className=\"navbar-brand\">\n            <a className=\"navbar-item\" href=\"/\">\n                Is the Bathroom Available?\n            </a>\n\n            <a\n                role=\"button\"\n                className=\"navbar-burger burger\"\n                aria-label=\"menu\"\n                aria-expanded=\"false\"\n                data-target=\"navbarBasicExample\"\n            >\n                <span aria-hidden=\"true\"/>\n                <span aria-hidden=\"true\"/>\n                <span aria-hidden=\"true\"/>\n            </a>\n        </div>\n\n        <div id=\"navbarBasicExample\" className=\"navbar-menu\">\n            <div className=\"navbar-end\">\n                <div className=\"navbar-item\">\n                    <div className=\"connected-status\">\n                        {\n                            wsStatus === ConnectionStatus.CONNECTED && (\n                                <>\n                                <span className=\"connected-status-message\">\n                                    Connected\n                                </span>\n                                    <span className=\"icon\">\n                                    <FontAwesomeIcon icon={faWifi}/>\n                                </span>\n                                </>\n                            )\n                        }\n\n                        {\n                            wsStatus === ConnectionStatus.DISCONNECTED && (\n                                <button className=\"button\" onClick={connect}>\n                                    <span className=\"connected-status-message\">\n                                        Disconnected\n                                    </span>\n                                        <span className=\"icon\">\n                                        <FontAwesomeIcon icon={faRedo}/>\n                                    </span>\n                                </button>\n                            )\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n    </nav>\n);\n\nexport default Header;\n","import { useCallback, useEffect, useReducer, useState } from \"react\";\nimport { DataPackage, ConnectionStatus } from \"./types\";\n\nenum ActionType {\n    WS_CONNECT_SUCCESS,\n    WS_DISCONNECT,\n    SET_DATA,\n    SET_ERROR\n}\n\ntype State = {\n    wsStatus: ConnectionStatus;\n    data: DataPackage | null;\n    error: Error | null;\n};\n\ntype Action = {\n    type: ActionType;\n    payload: any;\n}\n\nconst initialState: State = {\n    wsStatus: ConnectionStatus.DISCONNECTED,\n    data: null,\n    error: null,\n};\n\nconst reducer = (state: State, action: Action): State => {\n    switch (action.type) {\n        case ActionType.WS_CONNECT_SUCCESS:\n            return {\n                ...state,\n                wsStatus: ConnectionStatus.CONNECTED,\n            };\n        case ActionType.WS_DISCONNECT:\n            return {\n                ...state,\n                wsStatus: ConnectionStatus.DISCONNECTED,\n            };\n        case ActionType.SET_DATA:\n            return {\n                ...state,\n                data: action.payload,\n            };\n        case ActionType.SET_ERROR:\n            return {\n                ...state,\n                error: action.payload,\n            };\n        default:\n            throw new Error(`Received unidentified action: ${action.type}`)\n    }\n};\n\nconst useAvailability = () => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const [lastConnected, forceConnect] = useState(Date.now());\n\n    useEffect(\n        () => {\n            const socket = new WebSocket(process.env.REACT_APP_API_URL!);\n\n            socket.onopen = (evt) => {\n                dispatch({\n                    type: ActionType.WS_CONNECT_SUCCESS,\n                    payload: null,\n                });\n            };\n\n            socket.onerror = (evt) => {\n                dispatch({\n                    type: ActionType.SET_ERROR,\n                    payload: new Error(\"Something went wrong!\"),\n                });\n            };\n\n            socket.onmessage = (evt) => {\n                if (typeof evt.data === \"string\") {\n                    console.log(JSON.parse(evt.data));\n\n                    dispatch({\n                        type: ActionType.SET_DATA,\n                        payload: JSON.parse(evt.data),\n                    });\n                }\n            };\n\n            socket.onclose = (evt) => {\n                dispatch({\n                    type: ActionType.WS_DISCONNECT,\n                    payload: null,\n                });\n\n\n            };\n\n            const watchId = setInterval(\n                () => {\n                    socket.send(\"SEND_DATA_PLZ_KTHXBAI\");\n                },\n                30 * 1000, // 30 seconds\n            );\n\n            return () => {\n                clearInterval(watchId);\n                socket.close();\n            };\n        },\n        [lastConnected]\n    );\n\n    const connect = useCallback(\n        () => forceConnect(Date.now()),\n        []\n    );\n\n    return { ...state, connect };\n};\n\nexport default useAvailability;\n","import React, { useEffect, useState } from \"react\";\n\nimport moment, { duration } from \"moment\";\n\ntype Props = {\n    start: string;\n}\n\nconst rfcToHuman = (rfc: string): string => {\n    // thanks to https://github.com/moment/moment/issues/4333#issuecomment-450423176\n    const startDatetime = moment(rfc, \"YYYY-MM-DDTHH:mm:ssZ\");\n    const elapsedDuration = duration(startDatetime.diff(moment()));\n    return elapsedDuration.humanize(true);\n};\n\nconst TimeCounter = ({start}: Props) => {\n    const [elapsed, setElapsed] = useState(\"...\");\n\n    useEffect(\n        () => {\n            const watchId = setInterval(\n                () => {\n                    setElapsed(rfcToHuman(start));\n                },\n                250,\n            );\n\n            return () => clearInterval(watchId);\n        },\n        [start],\n    );\n\n    return (\n        <span>\n            {elapsed}\n        </span>\n    );\n};\n\nexport default TimeCounter;\n","import React from 'react';\nimport { AvailabilityRecord } from \"./types\";\nimport TimeCounter from \"./TimeCounter\";\n\ntype Props = {\n    history: AvailabilityRecord[];\n    latest: AvailabilityRecord;\n}\n\nconst RecentAvailability = ({ history, latest }: Props) => (\n    <nav className=\"panel recent-availability-panel\">\n        <p className=\"panel-heading has-text-centered\">\n            Recent Availability\n        </p>\n        <div className=\"panel-block\">\n            <article className={`message current-availability-message ${latest.available ? 'is-success' : 'is-danger'}`}>\n                <div className=\"message-body\">\n                    Currently <strong>{latest.available ? 'available' : 'unavailable'}</strong>.{' '}\n                    Last seen <TimeCounter start={latest.time}/>.\n                </div>\n            </article>\n        </div>\n        {\n            history.slice(1).map(item => (\n                <React.Fragment key={item.time}>\n                    {item.available === true && (\n                        <div className=\"panel-block has-background-success\"/>\n                    )}\n                    {item.available === false && (\n                        <div className=\"panel-block has-background-danger\"/>\n                    )}\n                    {item.available === null && (\n                        <div className=\"panel-block\"/>\n                    )}\n                </React.Fragment>\n            ))\n        }\n    </nav>\n);\n\nexport default RecentAvailability;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCoffee } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Footer = () => (\n    <footer className=\"footer\">\n        <div className=\"content has-text-centered\">\n            <p>\n                Made by <a href=\"https://github.com/tristanmkernan\">Tristan</a>{\" \"}\n                with&nbsp;\n                <a href=\"https://reactjs.org/\">react</a>,&nbsp;\n                <a href=\"https://bulma.io/\">bulma</a> and&nbsp;\n                <FontAwesomeIcon icon={faCoffee}/>. The source code is licensed&nbsp;\n                <a href=\"https://opensource.org/licenses/GPL-3.0\">GPLv3+</a>. The\n                website&nbsp;content is licensed&nbsp;\n                <a href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">\n                    CC BY NC SA 4.0\n                </a>\n                .\n            </p>\n        </div>\n    </footer>\n);\n\nexport default Footer;\n","import React, { ReactNode } from 'react';\nimport './App.css';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faExclamationTriangle } from \"@fortawesome/free-solid-svg-icons\";\n\nimport Header from './Header';\nimport RecentAvailability from \"./RecentAvailability\";\nimport Footer from \"./Footer\";\n\nimport useAvailability from \"./useAvailability\";\n\nimport { ConnectionStatus } from \"./types\";\n\ntype WrapperProps = {\n    children: ReactNode;\n    wsStatus: ConnectionStatus;\n    connect: () => void;\n}\nconst Wrapper = ({ children, wsStatus, connect }: WrapperProps) => (\n    <div className=\"container\">\n        <Header wsStatus={wsStatus} connect={connect}/>\n        <div className=\"my-main-row\">\n            {children}\n        </div>\n        <Footer/>\n    </div>\n);\n\nconst App: React.FC = () => {\n    const { data, wsStatus, error, connect } = useAvailability();\n\n    if (error) {\n        return (\n            <Wrapper connect={connect} wsStatus={wsStatus}>\n                <article className=\"message is-danger\">\n                    <div className=\"message-header\">\n                        <p>\n                            Error\n                        </p>\n                    </div>\n                    <div className=\"message-body\">\n                        {error.message}\n                    </div>\n                </article>\n            </Wrapper>\n        );\n    }\n\n    if (wsStatus === ConnectionStatus.DISCONNECTED) {\n        return (\n            <Wrapper wsStatus={wsStatus} connect={connect}>\n                <progress className=\"progress is-medium is-primary\" max=\"100\">15%</progress>\n            </Wrapper>\n        );\n    }\n\n    if (!data || 0 === data.recent.length) {\n        return (\n            <Wrapper connect={connect} wsStatus={wsStatus}>\n                <article className=\"message is-warning no-data-available-alert\">\n                    <div className=\"message-header\">\n                        <p>\n                            Warning\n                        </p>\n                        <span className=\"icon\">\n                                <FontAwesomeIcon icon={faExclamationTriangle}/>\n                            </span>\n                    </div>\n                    <div className=\"message-body\">\n                        No data available.\n                    </div>\n                </article>\n            </Wrapper>\n        );\n    }\n\n    return (\n        <Wrapper connect={connect} wsStatus={wsStatus}>\n            <RecentAvailability history={data.recent} latest={data.latest}/>\n        </Wrapper>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"bulma/css/bulma.min.css\";\nimport \"bulma-extensions/dist/css/bulma-extensions.min.css\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}